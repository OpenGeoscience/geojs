extends ../common/index.pug

block mainTutorial
  :markdown-it
    # Tutorial - Markers
    Create a map with a tile layer, define some data, and create a feature layer.

  +codeblock('javascript', 1).
    var map = geo.map({
      node: "#map",
      center: { x: -97.67, y: 31.80 },
      zoom: 4
    });
    map.createLayer('osm');

    var cities = [
      {lon: -74.0059413, lat: 40.7127837, name: "New York", population: 8405837},
      {lon: -118.2436849, lat: 34.0522342, name: "Los Angeles", population: 3884307},
      {lon: -87.6297982, lat: 41.8781136, name: "Chicago", population: 2718782},
      {lon: -95.3698028, lat: 29.7604267, name: "Houston", population: 2195914},
      {lon: -75.1652215, lat: 39.9525839, name: "Philadelphia", population: 1553165},
      {lon: -112.0740373, lat: 33.4483771, name: "Phoenix", population: 1513367}
    ];

    var layer = map.createLayer('feature', {features: ['marker']});


  :markdown-it
    Create a marker feature and set the data.  The default marker feature looks just line a point feature -- circles with borders.

  +codeblock('javascript', 2)(webgl=true).
    var feature = layer.createFeature('marker')
      .data(cities)
      .position(function (city) {
        return {
          x: city.lon,
          y: city.lat
        };
      })
      .draw();

  +codeblock_test('map has a feature layer with six markers', [
    'map.layers().length === 2',
    'map.layers()[1] instanceof geo.featureLayer',
    'map.layers()[1].features()[0] instanceof geo.markerFeature',
    'map.layers()[1].features()[0].data().length === 6'
    ])

  :markdown-it
    Markers have many different symbols and style options:

    - `symbol`: the symbol shape, enumerated in `geo.markerFeature.symbols`.  This includes `ellipse`, `triangle` (isosceles triangles), `rectangle`, `oval`, and `drop`.  There are symmetric repeating patterns such as `cross4`, `flower6`, `star5`, `jack6`, and `drop8`, where the number is the rotational symmetry from 2 to 16.
    - `symbolValue`: a number that modifies how the symbol appears, usually in the range of [0, 1].  This is often the ratio of the minor axis of the symbol to its major axis.  For `triangle`, it is the length of the base side compared to the identical sides.
    - `rotation`: the rotation in radians.
    - `rotateWithMap`: a boolean; if true, the symbol rotates when the map is rotated.  If false, it remains in the same orientation on the screen.
    - `radius`: in pixels.  Depending on `strokeOffset` and `radiusIncludesStroke`, this can include half or all of the stroke width.
    - `radiusIncludesStroke`: if truthy or undefined, the `radius` includes the `strokeWidth` based on the `strokeOffset`.  If defined and falsy, the radius does not include the `strokeWidth`; set this to `false` if `scaleWithZoom` is set to `"fill"`.
    - `strokeWidth`: the width of the stroke around the symbol in pixels.
    - `strokeOffset`: the position of the stroke compared to the radius.  This can only be -1 (inside), 0 (centered at the radius), or 1 (outside).
    - `scaleWithZoom`: one of the values defined in `geo.markerFeature.scaleModes`.  If `none`, the symbols remains the same size when the map is zoomed.  This can also be `fill`, `stroke`, or `all`, in which case the symbol will change size when the map is zoomed.  If scaling with zoom, the `radius` and `strokeWidth` are in pixels at zoom level 0.
    - `fillColor`
    - `fillOpacity`
    - `strokeColor`
    - `strokeOpacity`:

  +codeblock('javascript', 3, undefined, true).
    feature.style({
      symbol: geo.markerFeature.symbols.drop,
      symbolValue: 1 / 3,
      rotation: -Math.PI / 2,
      radius: 30,
      strokeWidth: 5,
      strokeColor: 'blue',
      fillColor: 'yellow',
      rotateWithMap: false
    })
    .draw();

  :markdown-it
    When scaling a marker with the map, the radius and stroke width are the values at zoom level 0.

  +codeblock('javascript', 4).
    feature.style({
      symbol: geo.markerFeature.symbols.star5,
      symbolValue: Math.sin(Math.PI / 5),
      radius: 1,
      strokeWidth: 0.1,
      scaleWithZoom: geo.markerFeature.scaleMode.all,
      rotateWithMap: true
    })
    .draw();

  :markdown-it
    Markers are drawn efficiently, even if they all have different styles.  This creates a large sample of symbols, each with a different style.

  +codeblock('javascript', 5).
    let count = 1000, markers = [];

    for (let i = 0; i < count; i += 1) {
      let symbol = Math.floor(Math.random() * geo.markerFeature.symbols.length);
      let symbolValue = Math.random();
      if (symbol === geo.markerFeature.symbols.triangle) {
        // triangles use a larger range than most symbols
        symbolValue *= 2;
      } else if (symbol >= geo.markerFeature.symbols.arrow && symbol < geo.markerFeature.symbols.arrow + geo.markerFeature.symbols.arrowMax) {
        // arrow symbols can take an array to specify their shape
        symbolValue = [
          Math.random(),
          Math.random(),
          Math.random() > 0.1 ? Math.random() : 0,
          Math.random() >= 0.5
        ];
        if (symbol >= geo.markerFeature.symbols.arrowBase) {
          symbolValue[0] /= 2;
          symbolValue[1] /= 2;
          symbolValue[2] /= 2;
        }
      }
      markers.push({
        x: Math.random() * 50 - 120,
        y: Math.random() * 40 + 10,
        radius: Math.random() * 30 + 5,
        strokeWidth: Math.random() > 0.1 ? Math.random() * 5 : 0,
        symbol: symbol,
        symbolValue: symbolValue,
        fillColor: {r: Math.random(), g: Math.random(), b: Math.random()},
        fillOpacity: Math.random(),
        strokeColor: {r: Math.random(), g: Math.random(), b: Math.random()},
        strokeOpacity: 0.5 + Math.random() * 0.5,
        rotation: Math.random() * Math.PI * 2
      });
    }
    feature.data(markers).position(d => d).style({
      radius: d => d.radius,
      strokeWidth: d => d.strokeWidth,
      symbol: d => d.symbol,
      symbolValue: d => d.symbolValue,
      fillColor: d => d.fillColor,
      fillOpacity: d => d.fillOpacity,
      strokeColor: d => d.strokeColor,
      strokeOpacity: d => d.strokeOpacity,
      rotation: d => d.rotation,
      scaleWithZoom: geo.markerFeature.scaleMode.none,
      rotateWithMap: true
    }).draw();
