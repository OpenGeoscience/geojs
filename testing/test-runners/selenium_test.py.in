#!/usr/bin/env python

# Base TestCase for selenium based unit testing.
# Requires python packages:
#     pillow
#     selenium
# Should be installable by:
#     pip install Pillow selenium

import sys
import os
import unittest
from unittest import TestCase
from math import sqrt
import json
import inspect
import time

if sys.version_info[0] == 2:
    from cStringIO import StringIO
    from urllib2 import urlopen
elif sys.version_info[0] == 3:
    from io import BytesIO as StringIO
    from urllib.request import urlopen
else:
    raise Exception("Unknown python version")

from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
from PIL import Image, ImageStat, ImageChops

from midas_handler import MidasHandler

# to be set by cmake:
TEST_HOST = "@TESTING_HOST@"
TEST_PORT = @TESTING_PORT@
SELENIUM_HOST = "@SELENIUM_HOST@"
SELENIUM_PORT = @SELENIUM_PORT@
DEPLOY_PATH = "@GEOJS_DEPLOY_DIR@"
BUILD_PATH = "@CMAKE_CURRENT_BINARY_DIR@"
SOURCE_PATH = "@CMAKE_CURRENT_SOURCE_DIR@"
TEST_REPO_PATH = "@DATA_REPO_PATH@"
MIDAS_BASE_URL = "@MIDAS_BASE_URL@"
MIDAS_COMMUNITY = "@MIDAS_COMMUNITY@"


class NullDriver(object):
    '''
    A placeholder for selenium drivers that does nothing.
    '''
    pass


class ImageDifferenceException(BaseException):
    '''
    Exception to be raised when two images differ.
    Stores extra information that can be captured to handle uploading
    failed tests.
    '''
    def __init__(self, **kw):
        self.stats = kw
        self.stats.update({
            'midas_url': MIDAS_BASE_URL,
            'midas_community': MIDAS_COMMUNITY
        })
        s = 'Calculated image difference %f over threshold.' % \
            kw.get('difference', float('inf'))
        super(ImageDifferenceException, self).__init__(s)

    def __str__(self):
        s = [BaseException.__str__(self)]
        if 'testPath' in self.stats:
            s.append(
                '<DartMeasurementFile name="TestImage" type="image/png">' +
                self.stats['testPath'] +
                '</DartMeasurementFile>'
            )
        if 'basePath' in self.stats:
            s.append(
                '<DartMeasurementFile name="ValidImage" type="image/png">' +
                self.stats['basePath'] +
                '</DartMeasurementFile>'
            )
        if 'diffPath' in self.stats:
            s.append(
                '<DartMeasurementFile name="DifferenceImage" type="image/png">' +
                self.stats['diffPath'] +
                '</DartMeasurementFile>'
            )
        return '\n'.join(s)


class ThresholdException(BaseException):
    '''
    Exception to be raised when a test doesn't meet a threshold value.
    '''
    def __init__(self, **kw):
        self.stats = kw
        s = 'Value %f doesn\'t meet threshold.' % kw.get('value', float('inf'))
        super(ThresholdException, self).__init__(s)

    def __str__(self):
        s = [BaseException.__str__(self)]
        if 'threshold' in self.stats:
            s.append(
                '<ThresholdValue value="' +
                self.stats['threshold'] +
                '</ThresholdValue>'
            )
        if 'value' in self.stats:
            s.append(
                '<ActualValue value="' +
                self.stats['value'] +
                '</ActualValue>'
            )
        return '\n'.join(s)


def _chromeOptions():
    opts = webdriver.ChromeOptions()
    opts.add_argument('--test-type')
    return {
        'chrome_options': opts
    }

drivers = {
    'firefox': (webdriver.Firefox, {}),
    'firefoxRemote': (webdriver.Remote, {
        'command_executor': 'http://{}:{}/wd/hub'.format(SELENIUM_HOST,
                                                         SELENIUM_PORT),
        'desired_capabilities': webdriver.common.desired_capabilities.
            DesiredCapabilities.FIREFOX
    }),
    'chrome': (webdriver.Chrome, _chromeOptions()),
    'chromeRemote': (webdriver.Remote, {
        'command_executor': 'http://{}:{}/wd/hub'.format(SELENIUM_HOST,
                                                         SELENIUM_PORT),
        'desired_capabilities': webdriver.common.desired_capabilities.
            DesiredCapabilities.CHROME
    }),
    'opera': (webdriver.Opera, {}),
    'phantomjs': (webdriver.PhantomJS, {}),
    'safari': (webdriver.Safari, {}),
    'ie': (webdriver.Ie, {}),
    'null': (NullDriver, {})
}


class BaseTest(TestCase):
    '''
    Base class for all selenium based tests.  This class
    contains several attributes that are configured by cmake
    to give the test cases information about the build environment.
    The class attributes representing paths should not be modified
    by derived classes in general unless noted in the docstrings.

    The testing framework is intended to be organized as follows:

    *   Each testing subdirectory contains one or more test classes derived from this class.
        Test classes each have a class attribute :py:attr:`BaseTest.testCase`
        that should be a tuple of strings.
    *   Each test class contains one or more test functions that are run independently.
    *   Each test function contains one or more unit tests that are referred to in the
        arguments list as ``testName``.

    The tests are discovered and executed using python's
    `unittest <https://docs.python.org/2/library/unittest.html>`_
    module on the commandline by executing: ::

        python -m unittest discover

    Paths to test specific resources such as base line images are
    computed as follows:

    *   Test web page ::

            DEPLOY_PATH/test/selenium/testDirectory/index.html

    *   Test case image store path ::

            DEPLOY_PATH/test/selenium/testDirectory/testCase[0]/testCase[1]/.../

    *   Unit test screenshots ::

            DEPLOY_PATH/test/selenium/testDirectory/testCase[0]/testCase[1]/.../testName.png

    *   MIDAS image store ::

            MIDAS_COMMUNITY/Testing/test/selenium/testDirectory/testCase[0]/testCase[1]/.../testName.png

        Where each MIDAS item contains multiple revisions and bitstreams to account for changes in
        the code and differences between platforms.

    *   Unit test screenshot comparisons for debugging ::

            DEPLOY_PATH/test/selenium/testDirectory/testCase[0]/testCase[1]/.../testName_test.png
            DEPLOY_PATH/test/selenium/testDirectory/testCase[0]/testCase[1]/.../testName_base_NN.png
            DEPLOY_PATH/test/selenium/testDirectory/testCase[0]/testCase[1]/.../testName_diff_NN.png

    '''

    #: String representing the selenium driver to be used.
    #: Currently supports 'firefox' and 'chrome'
    driverName = 'null'

    #: The address of the webserver hosting the test content
    #: configured by cmake.
    testHost = TEST_HOST

    #: The port of the webserver hosting the test content
    #: configured by cmake.
    testPort = TEST_PORT

    # unused at the moment
    seleniumHost = SELENIUM_HOST

    # unused at the moment
    seleniumPort = SELENIUM_PORT

    #: The absolute path to the webserver root.
    deploy_path = DEPLOY_PATH

    #: The absolute path to the build root.
    build_path = BUILD_PATH

    #: The absolute path to the source root.
    source_path = SOURCE_PATH

    #: The root URL of the test webserver.
    testBaseURL = 'http://' + testHost + ':' + str(testPort)
    if testHost == '0.0.0.0':
        testBaseURL = 'http://127.0.0.1:' + str(testPort)

    #: A tuple giving the selenium test root relative to both
    #: :py:attr:`testBaseURL` and :py:attr:`deploy_path`.
    testPath = ('test', 'selenium')

    #: A tuple representing the relative path to test data relative to the
    #: `geojs MIDAS community <http://midas3.kitware.com/midas/community/40>`_.
    midasPath = ('Testing', ) + testPath

    #: A tuple representing the path to the selenium test
    #: sources relative to :py:attr:`source_path`.
    srcTestPath = ('testing', 'test-cases', 'selenium-tests')

    #: The maximum allowable image difference between screenshots
    #: and baseline images.  The difference is calculated as the
    #: RMS average difference between pixel values in the RGB
    #: channels.  This should be a number between
    #: ``0`` and ``255``, with ``0`` meaning a perfect match.
    imageDifferenceThreshold = 2.0

    #: A tuple representing the path to a specific test case.
    #: This value should be set by all derived classes.  The
    #: path is used to determine both the image store path
    #: on MIDAS server and the local image output path.
    testCase = tuple()

    #: A :py:class:`midas_handler.MidasHandler` object providing methods for downloading and
    #: uploading data to the
    #: `geojs MIDAS community <http://midas3.kitware.com/midas/community/40>`_.
    midas = MidasHandler(MIDAS_BASE_URL, MIDAS_COMMUNITY)

    #: The revision number of the test.  This value should be set by
    #: all derived classes and incremented
    #: whenever there are changes to either the test case or the geojs
    #: source resulting in an expected change in screenshots.  After
    #: incrementing this value, new baseline images must be uploaded
    #: to the MIDAS server.
    testRevision = 1

    @classmethod
    def _relativeImagePath(cls, testName):
        '''
        Get the standard path for storing a test image as a list.
        '''
        case = cls.testCase

        if isinstance(case, basestring):
            case = case.split('/')
        if isinstance(testName, basestring):
            testName = testName.split('/')

        testName = list(testName)
        testName[-1] += '.png'

        return list(case) + testName

    @classmethod
    def startServer(cls):
        '''
        Start a local web server. (depreciated)
        '''
        pass

    @classmethod
    def stopServer(cls):
        '''
        Stop the local webserver. (depreciated)
        '''
        pass

    def setUp(self):
        '''
        Start up a selenium driver.
        '''
        drvTuple = drivers[self.driverName]
        self.driver = drvTuple[0](**drvTuple[1])

    def tearDown(self):
        '''
        Stop the selenium driver and calls the coverage handler
        if enabled.
        '''
        self.driver.execute_script(
            'if (window.stopTest) { window.stopTest(); }'
        )
        self.driver.quit()

    def wait(self, variable='window.testComplete', function=None, timeout=30):
        '''
        Wait for a variable to be set to true, or a function to return true.
        Raise an error if timeout is exceeded.

        :param string variable: The variable to query.
        :param string function: The function to execute.
        :param float timeout: The maximum number of seconds to wait.

        '''
        if function is None:
            function = 'return !!%s' % variable
            variable = 'function return value'

        def check_status(drv):
            try:
                return drv.execute_script(function)
            except Exception:
                return False

        WebDriverWait(
            self.driver,
            timeout
        ).until(check_status, 'checking truthiness of %s' % variable)

    def runScript(self, script):
        '''
        Run a javascript script in the browser.  Scripts that execute
        asynchronously should set a global variable when finished
        so that a :py:func:`BaseTest.wait` call can be made to block
        for it to finish, as follows:

        >>> script = 'window.setTimeout(function () { window.finished = true; })'
        >>> test.runScript(script)
        >>> test.wait('window.finished')

        :param string script: The script content to run.
        '''
        return self.driver.execute_script(script)

    def resizeWindow(self, width, height):
        '''
        Resize the browser to the given width and height.

        :param int width: The width of the view in pixels.
        :param in height: The height of the view in pixels.
        '''
        testImage = self.screenshot()
        if width == testImage.size[0] and height == testImage.size[1]:
            return
        self.driver.set_window_size(width, height)
        # Check the actual size of the viewport of the window we requested
        testImage = self.screenshot()
        dw = width - testImage.size[0]
        dh = height - testImage.size[1]
        # Rescale the window so the viewport is actually our target size
        if dw or dh:
            self.driver.set_window_size(width + dw, height + dh)

    def getElement(self, selector):
        '''
        Find an element on the page by a CSS selector. For example,

        >>> node = test.getElement('#my-div')

        :param string selector: A CSS selector.
        :rtype: `WebElement`_

        .. _Webelement: http://selenium-python.readthedocs.org/en/latest/api.html#selenium.webdriver.remote.webelement.WebElement
        '''
        return self.driver.find_element_by_css_selector(selector)

    def getElements(self, selector):
        '''
        Find all elements on the page matching a css selector.

        >>> divs = test.getElements('div')

        :param string selector: A CSS selector.
        :rtype: List of `WebElement`_

        .. _Webelement: http://selenium-python.readthedocs.org/en/latest/api.html#selenium.webdriver.remote.webelement.WebElement

        '''
        return self.driver.find_elements_by_css_selector(selector)

    def screenshot(self):
        '''
        Capture a screenshot of the current viewport.

        :rtype: `Image`_

        .. _Image: http://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image
        '''
        png = self.driver.get_screenshot_as_png()
        return Image.open(StringIO(png))

    def loadURL(self, url, relative=True):
        '''
        Load a URL path on the test server.

        :param string url: The path to the page go load.
        :param bool relative: Whether or not to prefix with the current test path.

        For example,

        >>> test.loadURL('index.html')

        will load `<http://localhost:50100/index.html>`_, and

        >>> test.loadURL('/index.html', False)

        will load `<http://localhost:50100/path/to/test/index.html>`_
        using the currently configured test path.
        '''
        if relative:
            url = '/'.join(
                (self.testBaseURL,) +
                tuple(self.testPath) +
                (url,)
            )
        else:
            url = self.testBaseURL + url
        return self.driver.get(url)

    def drag(self, element, delta, offset=(0, 0)):
        '''
        Drag the element given (by a CSS selector) starting
        at ``offset`` relative to the center of the element by
        an amount ``delta``.

        :param string element: A CSS selector.
        :param delta: The number of pixels to drag in ``x`` and ``y``.
        :type delta: [x, y]
        :param offset:  The offset from the element center to start the drag.
        :type offset: [x, y]

        For example,

        >>> test.drag('#map', (100, -10), (-50, 0))

        performs a mousedown on ``#map`` ``50`` pixels to the left of its center,
        drags right ``100`` pixels and up ``10`` pixels, and then performs a mouseup.
        '''
        el = self.getElement(element)
        action = ActionChains(self.driver)

        action.move_to_element_with_offset(el, offset[0], offset[1])
        action.click_and_hold()
        action.move_by_offset(delta[0], delta[1])
        action.release()
        action.perform()

    def hover(self, element, offset=(0, 0)):
        '''
        Move the mouse pointer over the given element and offset.

        :param string element: A CSS selector.
        :param offset: The offset from the element center
        :type offset: [x, y]
        '''
        el = self.getElement(element)
        action = ActionChains(self.driver)
        action.move_to_element_with_offset(el, offset[0], offset[1])
        action.perform()

    def click(self, element, offset=(0, 0)):
        '''
        Click on a element given (by a CSS selector) at ``offset``
        relative to the center of the element.

        :param string element: A CSS selector
        :param offset: The offset from the element center
        :type offset: [x, y]

        For example,

        >>> test.click('button.test-button')
        '''
        el = self.getElement(element)
        action = ActionChains(self.driver)
        action.move_to_element_with_offset(el, offset[0], offset[1])
        action.click()
        action.perform()

    @classmethod
    def loadImageFile(cls, filename, relative=True):
        '''
        Load an image from a local file.  If relative is True, then
        load it relative the current testing directory, otherwise
        assume an absolute path.

        :param string filename: The file path of the image.
        :param bool relative: Whether to treat the filename as a relative or absolute path.
        :rtype: `Image`_

        .. _Image: http://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image
        '''
        if relative:
            filename = os.path.join(*(
                (SOURCE_PATH,) +
                tuple(cls.srcTestPath) +
                (filename,)
            ))
        return Image.open(filename)

    @classmethod
    def loadImageURL(cls, filename, relative=True):
        '''
        Load an image from a URL.  If relative is True, then
        load it relative the current testing path, otherwise
        assume an absolute URL.

        :param string filename: The file path of the image.
        :param bool relative: Whether to treat the filename as a relative or absolute path.
        :rtype: `Image`_
        :raises Exception: if the image could not be loaded

        .. _Image: http://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image
        '''
        if relative:
            filename = '/'.join(
                (cls.testBaseURL,) +
                tuple(cls.testPath) +
                (filename,)
            )
        request = urlopen(filename)
        if request.getcode() != 200:
            raise Exception("Could not load image at %s" % filename)
        img = StringIO(request.read())
        return Image.open(img)

    @classmethod
    def loadTestImages(cls, testName, revision=None):
        '''
        Load all images from the globally configured MIDAS image store.  The
        images are used for matching a screenshot for the current test.
        Multiple images are possible to account for differences on
        multiple platforms.  If no revision is provided, then the
        class attribute :py:attr:`testRevision` is used.

        :param string testName: The name of the current test.
        :param int revision: The revision number to load.
        :rtype: List of `Images`_.

        .. _Images: http://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image
        '''

        if revision is None:
            revision = cls.testRevision
        testImagePath = \
            list(cls.midasPath) + \
            list(cls._relativeImagePath(testName))
        images = cls.midas.getImages(testImagePath, revision)
        if not len(images):
            raise Exception(
                "No images found at path '%s'" % '/'.join(testImagePath)
            )
        return images

    @classmethod
    def exportTestImage(cls, img, testName, kind='', deploy=''):
        '''
        Save an image to the local image store path.  This is an internal
        method providing a unified method for saving image outputs from
        tests for debugging test failures.

        :param img: The image object to save.
        :type img: `Image`_
        :param string testName: The name of the test.
        :param string kind: (optional) Additional string to added to the file name distinguishing multiple images.
        :param string deploy: (optional) Root path for the local image store.
        :returns: The full path of the saved image.
        :rtype: string

        .. _Image: http://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image
        '''
        if not deploy:
            deploy = DEPLOY_PATH
        deploy = deploy.split(os.path.sep)
        fullPathList = \
            list(deploy) + \
            list(cls.testPath) + \
            cls._relativeImagePath(testName)
        fullPath = os.path.sep.join(fullPathList[:-1])
        try:
            os.makedirs(fullPath)
        except OSError:
            pass  # directory already exists... probably

        splt = os.path.splitext(fullPathList[-1])

        if kind:
            kind = '_' + kind

        imageName = os.path.join(
            fullPath,
            splt[0] + kind + splt[1]
        )
        img.putalpha(255)
        img.save(imageName)
        return imageName

    @classmethod
    def compareImages(cls, baseImage, testImage, testName, iImage=0):
        '''
        Compute the difference between two images and throw a
        :py:class:`ImageDifferenceException` if the difference is above
        :py:attr:`imageDifferenceThreshold`.  If the two images are
        different sizes, this function will always raise.

        :param baseImage: The base line image.
        :type baseImage: `Image`_
        :param testImage: The image generated by a screenshot.
        :type testImage: `Image`_
        :param string testName: The name of the test.
        :param int iImage: A number used to generate unique file names when doing multiple comparisons per test.
        :raises ImageDifferenceException: If the images are different.

        .. _Image: http://pillow.readthedocs.org/en/latest/reference/Image.html#PIL.Image.Image
        '''

        basePath = cls.exportTestImage(
            baseImage,
            testName,
            'base_%02i' % iImage
        )
        testPath = cls.exportTestImage(testImage, testName, 'test')

        stats = dict(
            difference=float('inf'),
            iImage=iImage,
            testName=testName,
            testPath=testPath,
            basePath=basePath,
            midas_path=list(cls.midasPath) +
            list(cls._relativeImagePath(testName))
        )

        if baseImage.size != testImage.size:
            raise ImageDifferenceException(**stats)

        nPixels = baseImage.size[0] * baseImage.size[1]
        diff = ImageChops.difference(baseImage, testImage)
        st = ImageStat.Stat(diff)
        sum2 = st.sum2
        val = sqrt(reduce(lambda x, y: x + y, sum2, 0)/(len(sum2) * nPixels))

        diffPath = cls.exportTestImage(diff, testName, 'diff_%02i' % iImage)

        stats.update({
            'difference': val,
            'diffPath': diffPath
        })
        if val > cls.imageDifferenceThreshold:
            raise ImageDifferenceException(**stats)

    def screenshotTest(self, testName, revision=None):
        '''
        Convenience method for taking a screenshot and comparing
        to stored images.  Throws an exception if the images differ
        by more than :py:attr:`imageDifferenceThreshold`.  This method
        also exports the images and differences under the deploy path
        for debugging failed tests.  If no revision is provided, then the
        class attribute :py:attr:`testRevision` is used.


        :param string testName: The name of the test.
        :param int revision: The revision number to compare against.
        :raises ImageDifferenceException: If the images are different.
        '''

        # put in a global 1 second delay for screenshots to ensure the rendering is done
        time.sleep(1)

        failure = False
        testImage = self.screenshot()
        testImagePath = self.exportTestImage(
            testImage,
            testName,
            deploy=TEST_REPO_PATH
        )

        if revision is None:
            revision = self.testRevision

        # collect test stats for possibly uploading new images to server
        stats = {
            'testPath': testImagePath,
            'testName': testName,
            'revision': revision,
            'difference': float('inf'),
            'iImage': -1,
            'midas_path': list(self.midasPath) +
            list(self._relativeImagePath(testName))
        }

        try:
            baseImages = self.loadTestImages(testName, revision)
            assert len(baseImages)
        except Exception:
            raise ImageDifferenceException(**stats)

        success = False
        iImage = 0
        minDiff = float('inf')
        iDiff = -1
        excep = None
        while not success and iImage < len(baseImages):
            try:
                self.compareImages(
                    baseImages[iImage],
                    testImage,
                    testName,
                    iImage
                )
                success = True
            except ImageDifferenceException as e:
                if e.stats['difference'] <= minDiff:
                    stats.update(e.stats)
                    e.stats = stats
                    minDiff = e.stats['difference']
                    iDiff = iImage
                    excep = e
                iImage += 1
            except Exception as e:
                if excep is None:
                    excep = e

        if not success:
            raise excep


@unittest.skipIf(
    os.environ.get('FIREFOX_TESTS', 'ON') == 'OFF',
    "Firefox tests disabled by $FIREFOX_TESTS"
)
class FirefoxTest(BaseTest):
    '''
    Firefox test base class.  Uses the Firefox selenium driver.  May
    be extended in the future to handle Firefox specific customizations.
    Setting the environment variable ``FIREFOX_TESTS`` to ``OFF`` will
    turn off all tests derived from here.
    '''
    driverName = 'firefox'
    if SELENIUM_HOST not in ('localhost', '127.0.0.1'):
        driverName = 'firefoxRemote'


@unittest.skipIf(
    os.environ.get('CHROME_TESTS', 'OFF') == 'OFF',
    "Chrome tests disabled by $CHROME_TESTS"
)
class ChromeTest(BaseTest):
    '''
    Chrome test base class.  Uses the Chrome selenium driver.  May
    be extended in the future to handle Chrome specific customizations.
    All tests derived from here are disabled by default because they
    require special drivers to be installed.
    Setting the environment variable ``CHROME_TESTS`` to ``ON`` will
    enable them.
    '''
    driverName = 'chrome'
    if SELENIUM_HOST not in ('localhost', '127.0.0.1'):
        driverName = 'chromeRemote'


def setUpModule():
    '''
    A module wide set up method that starts the test web server.
    Unless there is a reason to override the default behavior in
    your test, you should import this function into your test module.
    '''
    BaseTest.startServer()


def tearDownModule():
    '''
    A module wide tear down method that stops the test web server.
    Unless there is a reason to override the default behavior in
    your test, you should import this function into your test module.
    '''
    BaseTest.stopServer()


def makeAllBrowserTest(cls, baseName=None, **kw):
    '''
    Instrument a test class to run in all currently enabled browsers.
    Takes in a class that will be used to generate browser specific
    classes using class mixins.  This is a convience function for the
    case when a test doesn't need any special handling for different
    browsers.  Extra keyword arguments are appended as class level
    variables.

    :param class cls: The base test class
    :param str baseName: Override cls.__name__ to construct generated class names

    For example, ::

        class MyTest(object):
            def test_example(self):
                pass  # Do test here

        makeAllBrowserTest(MyTest, aparam=1)
    '''

    # This black magic is used to get the module of the calling function:
    module = inspect.getmodule(inspect.stack()[1][0])

    if baseName is None:
        baseName = cls.__name__

    testCase = tuple(getattr(cls, 'testCase', ()))

    for base in [FirefoxTest, ChromeTest]:
        name = baseName + base.driverName.capitalize()

        _kw = dict(**kw)
        _kw['testCase'] = testCase + (base.driverName,)

        setattr(
            module,
            name,
            type(name, (cls, base), _kw)
        )
